#include <SPI.h>
#include <Adafruit_GFX.h>
#include <Adafruit_PCD8544.h>
// Software SPI (slower updates, more flexible pin options):// pin 7 - Serial clock out (SCLK)// pin 6 - Serial data out (DIN)// pin 5 - Data/Command select (D/C)// pin 4 - LCD chip select (CS)// pin 3 - LCD reset (RST)
Adafruit_PCD8544 display = Adafruit_PCD8544(7, 6, 5, 4, 3);

static const unsigned char PROGMEM ffos[] =
{ B00000000,B00000000,B00000000,B00000000,B00000000,B00000001,B11111111,B10000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00001111,B11110111,B11110000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00111100,B00111100,B00011110,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B11100111,B11111111,B11100111,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000011,B10011110,B00000000,B00111101,B11000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000110,B01110011,B11111111,B11001110,B01100000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00001101,B11001111,B00111100,B11111011,B10110000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00011011,B10111000,B00011100,B00011100,B11011000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00110110,B01100000,B00011100,B00000111,B01101100,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B01101101,B11000000,B00011100,B00000001,B10110110,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B01011011,B00000000,B00111100,B00000000,B11011011,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B11010110,B00000000,B00111100,B00000000,B01101101,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000001,B10110100,B00000000,B00111110,B00000000,B00110111,B10000000,B00000000,
  B00000000,B00000000,B00000000,B00000001,B01101100,B00000000,B00111100,B00000000,B00111110,B11000000,B00000000,
  B00000000,B00000000,B00000111,B11000011,B01011110,B00000000,B00111100,B00000000,B01111011,B11000000,B00000000,
  B00000000,B00000000,B01111000,B00111110,B11011111,B10000000,B00011000,B00000001,B11111101,B01000000,B00000000,
  B00000000,B00000000,B10000000,B00000111,B10111111,B11110000,B00011000,B00001111,B11111101,B01100000,B00000000,
  B00000000,B00000011,B00000000,B00000110,B11100011,B11111000,B00011000,B00001111,B11000101,B10100000,B00000000,
  B00000000,B00000100,B00000000,B00000111,B11100000,B11111100,B00011000,B00011111,B10000110,B10100000,B00000000,
  B00000000,B00001000,B00000000,B00000101,B11110000,B01111110,B00111110,B00111111,B00000010,B10110000,B00000000,
  B00000000,B00010000,B00000000,B00000101,B01101000,B01111111,B11100011,B11111110,B00000010,B11110000,B00000000,
  B00000000,B00100000,B00000000,B00000101,B01001000,B00000011,B10011101,B11000000,B00000010,B11110000,B00000000,
  B00000000,B01000000,B00000000,B00000101,B01000100,B00000001,B10111110,B10000000,B00000010,B11110000,B00000000,
  B00000000,B01000000,B00000000,B00001101,B01000010,B00000001,B11100110,B10000000,B00000011,B11010000,B00000000,
  B00000000,B10000000,B01111000,B00001101,B01000010,B00000001,B10100110,B10000000,B00000011,B11010000,B00000000,
  B00000000,B10000000,B00111100,B00000101,B01000001,B00000001,B10111101,B10000000,B00000010,B11110000,B00000000,
  B00000000,B10000000,B00011110,B00000101,B01000001,B00000111,B11001001,B11100000,B00000010,B11110000,B00000000,
  B00000001,B00000111,B11111111,B00000101,B01100001,B01111111,B01111111,B01111110,B00000010,B10110000,B00000000,
  B00000001,B00000111,B11111111,B00000101,B11100000,B11111100,B00111100,B00111111,B00000110,B10110000,B00000000,
  B00000001,B00000111,B11111110,B00000111,B10100001,B11111000,B00011000,B00011111,B10000110,B10100000,B00000000,
  B00000001,B00000000,B00011100,B00000110,B10100011,B11111000,B00011000,B00001111,B11100101,B11100000,B00000000,
  B00000001,B00000000,B00111000,B00000010,B11111111,B11110000,B00011000,B00000111,B11111101,B01100000,B00000000,
  B00000001,B00000000,B01110000,B00000011,B11011111,B10000000,B00011100,B00000000,B11111011,B01000000,B00000000,
  B00000001,B00000000,B00000000,B00000011,B01111110,B00000000,B00111100,B00000000,B00111010,B11000000,B00000000,
  B00000001,B00000000,B00000000,B00000001,B10101101,B00000000,B00111110,B00000000,B00010110,B10000000,B00000000,
  B00000001,B00000000,B00000000,B00000000,B10110111,B00000000,B00111110,B00000000,B00110101,B10000000,B00000000,
  B00000000,B10000000,B00000000,B00000000,B11011011,B00000000,B00111100,B00000000,B01101101,B00000000,B00000000,
  B00000000,B10000000,B00000000,B00000000,B01101011,B10000000,B00011100,B00000000,B11011011,B00000000,B00000000,
  B00000000,B01000000,B00000000,B00000000,B00101110,B11000000,B00011100,B00000011,B10110110,B00000000,B00000000,
  B00000000,B01000000,B00000000,B00000000,B00110111,B01110000,B00011100,B00000111,B01101100,B00000000,B00000000,
  B00000000,B00100000,B00000000,B00000000,B00011101,B10111100,B00011100,B00011100,B11011000,B00000000,B00000000,
  B00000000,B00010000,B00000000,B00000000,B00001110,B11101111,B10111101,B11110011,B10110000,B00000000,B00000000,
  B00000000,B00010000,B00000000,B00000000,B00010011,B01111001,B11111111,B10001110,B01100000,B00000000,B00000000,
  B00000000,B00001100,B00000000,B00000000,B00100001,B11011111,B00000000,B01111001,B11000000,B00000000,B00000000,
  B00000000,B00000010,B00000000,B00000000,B01000000,B01110011,B11111111,B11000111,B00000000,B00000000,B00000000,
  B00000000,B00000001,B10000000,B00000001,B10000000,B00111110,B00000000,B00111100,B00000000,B00000000,B00000000,
  B00000000,B00000000,B01100000,B00001110,B00000000,B00000111,B11111111,B11100000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00011111,B11110000,B00000000,B00000000,B00011100,B00000000,B00000000,B00000000,B00000000,
};

float voltage1 = 0;
float sensorValue1 = 0;
float voltage2 = 0;
float sensorValue2 = 0;
float u_min = 2.8; //minimale akkuspannung
float u_max = 4.2; //maximale akkuspannung
float trafic = 0;
int i = 0;
int online = 0;
int clientos = 0;
int offline = 0;
int clientszahl = 0;
int start = 0;
int prozent = 0;

String uhrs = "";
String clients = "";
String clientsos = "";

void setup() {
  display.begin();
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(BLACK);
  display.setContrast(60);
  display.setRotation(2);
  display.drawBitmap(0, 0,  ffos, 84, 48, 1);
  display.display();
  pinMode(9, OUTPUT);
  pinMode(10,OUTPUT);
}

void loop() {
  
  sensorValue1 = analogRead(A0);
  sensorValue2 = analogRead(A1);
  sensorValue2 = (sensorValue2*2);
  sensorValue2 = (sensorValue2 - sensorValue1);
  voltage1 = sensorValue1 * (5.0 / 1023.0);
  voltage2 = sensorValue2 * (5.0 / 1023.0);
  
  if((voltage1 < u_min)||(voltage2 < u_min))
  {
    delay(500);
    if((voltage1 < u_min)||(voltage2 < u_min))
    {
      digitalWrite(9,LOW);
    }
  }
  else
  {
    if(start == 0)
    {
      digitalWrite(10,HIGH);
      digitalWrite(9,HIGH);
      delay(500);
      digitalWrite(10,LOW);
      delay(40000);
      start = 1;
    }
  }
  
  //prozentabfrage
  prozent = ((voltage1 - 3)*83.33);
  
  //hauptprogramm
  
  //uhrabfrage
  Serial.begin(115200);
  delay(100);
  Serial.print("date\n");
  uhrs = Serial.readString();
  Serial.end();
  uhrs.remove(0, 17);
  uhrs.remove(5,39);
  
  //clientabfrage
  Serial.begin(115200);
  delay(100);
  Serial.print("batctl tl|wc -l\n");
  clients = Serial.readString();
  Serial.end();
  clients.remove(0, 17);
  clientszahl = (clients.toInt() -3);
  
  //abfrage statistik datei
  Serial.begin(115200);
  delay(100);
  Serial.print("rm clients_lcd.php\n");
  Serial.print("wget http://[fd74:fdaa:9dc4::16:1]/clients_lcd.php\n");
  delay(3000);
  Serial.end();
  delay(100);
  Serial.begin(115200);
  delay(100);
  Serial.print("cat clients_lcd.php\n");
  clientsos = Serial.readString();
  Serial.end();
  clientsos.remove(0, 21);
  online = clientsos.toInt();
  
  for(i=0; i<8; i++)
  {
    if(clientsos[i]=='|')
    {
      clientsos.remove(0, i+1);
      break;
    }
  }
  clientos = clientsos.toInt();
  
  for(i=0; i<8; i++)
  {
    if(clientsos[i]=='|')
    {
      clientsos.remove(0, i+1);
      break;
    }
  }
  offline = clientsos.toInt();
  
  for(i=0; i<8; i++)
  {
    if(clientsos[i]=='|')
    {
      clientsos.remove(0, i+1);
      break;
    }
  }
  trafic = clientsos.toFloat();
  
  //display ausgabe
  display.clearDisplay();
  display.setCursor(0, 0);
  display.print(uhrs); display.println("   FF-OS");
  display.print("U1 = "); display.print(voltage1); display.println("V");
  display.print("U2 = "); display.print(voltage2); display.println("V");
  display.print("Akku: "); display.print(prozent); display.println("%");
  display.print("Clients: ");
  if(clientszahl < 0)
  {
    display.println("ERROR");
  }
  else
  {
    display.println(clientszahl);
  }
  display.display();
  delay(5000);
  display.clearDisplay();
  display.setCursor(0, 0);
  display.println("Statistik OS");
  display.print("\nOnline: "); display.println(online);
  display.print("Offline: "); display.println(offline);
  display.print("Clients: "); display.println(clientos);
  display.print("RX: "); display.print(trafic); display.print("GB");
  display.display();
  delay(5000);
  display.clearDisplay();
  display.drawBitmap(0, 0,  ffos, 84, 48, 1);
  display.display();
  
  String uhrs = "";
  String clients = "";
  String clientsos = "";
}
